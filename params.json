{
  "name": "Obdi-aws-ec2lib",
  "tagline": "",
  "body": "# obdi-aws-ec2lib\r\nLibrary of AWS functions to be called via REST.\r\n\r\n# Todo\r\n\r\n# Screenshot\r\n\r\n![](images/obdi-aws-ec2lib-small.png?raw=true)\r\n\r\n# What is it?\r\n\r\nA collection of REST end points that communicate with the AWS API. It is used\r\nby other plugins.\r\n\r\n# Installation\r\n\r\n## Installing the plugin\r\n\r\n* Log into the admin interface, 'https://ObdiHost/manager/admin'.\r\n* In Plugins -> Manage Repositories add, 'https://github.com/mclarkson/obdi-awstools-repository.git'\r\n* In Plugins -> Add Plugin, choose 'aws-ec2lib' and Install.\r\n\r\n# Dev\r\n\r\nEach REST end-point uses authentication information saved in a per-environment\r\njson capability object. Clients do not send AWS credentials to REST end-points.\r\nEnsure that a json object named 'AWS_ACCESS_KEY_ID_1' is present for the\r\nenvironment, and that it contains at least:\r\n```\r\n{\"aws_access_key_id\":\"AB...2Q\",\"aws_secret_access_key\":\"wT...qdS\"}\r\n```\r\nWhen an environment has an AWS_ACCESS_KEY_ID_1 capability, that is all that is\r\nrequired to use all REST api functions.\r\n\r\n## REST End Points\r\n\r\n[attach-volume](#attach-volume)<br>\r\n[copy-image](#copy-image)<br>\r\n[copy-snapshot](#copy-snapshot)<br>\r\n[create-image](#create-image)<br>\r\n[create-snapshot](#create-snapshot)<br>\r\n[create-volume](#create-volume)<br>\r\n[delete-snapshot](#delete-snapshot)<br>\r\n[delete-volume](#delete-volume)<br>\r\n[describe-availability-zone](#describe-availability-zone)<br>\r\n[describe-instances](#describe-instances)<br>\r\n[describe-regions](#describe-regions)<br>\r\n[describe-snapshots](#describe-snapshots)<br>\r\n[describe-volume-status](#describe-volume-status)<br>\r\n[describe-volumes](#describe-volumes)<br>\r\n[detach-volume](#detach-volume)<br>\r\n[import-image](#import-image)<br>\r\n[import-instance](#import-instance)<br>\r\n[register-image](#register-image)<br>\r\n[run-instances](#run-instances)\r\n\r\n### <a name=\"attach-volume\"></a>attach-volume\r\n\r\nAttach a volume to a running or stopped instance.\r\n\r\nhttp://docs.aws.amazon.com/sdk-for-go/api/service/ec2/#EC2.AttachVolume\r\n\r\n```\r\nSupported POST data JSON parameters:\r\n\r\n    Device     string\r\n    DryRun     bool\r\n    InstanceId string\r\n    VolumeId   string\r\n```\r\n\r\nExample:\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Create a 30GB gp2 volume in availability zone us-west-2a\r\n\r\n$ curl -k -d '{\"Device\":\"/dev/sdb\",\"InstanceId\":\"i-xxxxxx\",\"VolumeId\":\"vol-xxxxx\"}' \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/attach-volume?env_id=1&region=us-west-2\"\r\n\r\n```\r\n\r\n### <a name=\"copy-image\"></a>copy-image\r\n\r\nCopy an AMI to a different region.\r\n\r\n[CopyImage (go aws sdk)](http://docs.aws.amazon.com/sdk-for-go/api/service/ec2/#EC2.CopyImage)\r\n\r\n```\r\nSupported POST data JSON parameters:\r\n\r\n    Name          string  // The name of the new AMI in the destination region.\r\n    SourceImageId string  // The ID of the AMI to copy.\r\n    SourceRegion  string  // The name of the region that contains the AMI to copy.\r\n    Description   string  // A description for the new AMI in the destination region.\r\n    DryRun        bool    // Checks whether you have the required permissions for the action.\r\n    ClientToken   string  // Unique, case-sensitive identifier you provide to ensure idempotency.\r\n    Encrypted     bool    // Specifies whether the destination snapshots of the copied image should be encrypted.\r\n    KmsKeyId      string  // The full ARN of the AWS Key Management Service (AWS KMS) CMK to use when encrypting the snapshots\r\n```\r\n\r\nExample:\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Copy an image from us-west-2 to us-east-1\r\n\r\n$ curl -k -d '\r\n{\r\n    \"Name\":\"Fantastic Copied Image\",\r\n    \"SourceRegion\":\"us-west-2\",\r\n    \"SourceImageId\":\"ami-a9d109c9\",\r\n    \"Description\":\"Image copied from us-west-2\"\r\n}' \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/copy-image?env_id=2&region=us-east-1\"\r\n```\r\n\r\n### <a name=\"copy-snapshot\"></a>copy-snapshot\r\n\r\nCopy a snapshot to the same or different region.\r\n\r\n[CopySnapshot (go aws sdk)](http://docs.aws.amazon.com/sdk-for-go/api/service/ec2/#EC2.CopySnapshot)\r\n\r\n```\r\nSupported POST data JSON parameters:\r\n\r\n    SourceSnapshotId  string  // The ID of the EBS Snapshot to copy.\r\n    SourceRegion      string  // The name of the region that contains the snapshot to copy.\r\n    Description       string  // A description for the new AMI in the destination region.\r\n    PresignedUrl      string  // The pre-signed URL that facilitates copying an encrypted snapshot.\r\n    DestinationRegion string  // The destination region to use in the PresignedUrl parameter\r\n                              //  of a snapshot copy operation. This parameter is only valid\r\n                              //  for specifying the destination region in a PresignedUrl\r\n                              //  parameter, where it is required.\r\n    DryRun            bool    // Checks whether you have the required permissions for the action.\r\n    Encrypted         bool    // Specifies whether the destination snapshots of the\r\n                              //  copied image should be encrypted.\r\n    KmsKeyId          string  // The full ARN of the AWS Key Management Service (AWS KMS)\r\n                              //  CMK to use when encrypting the snapshots\r\n```\r\n\r\nExample:\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Copy a snapshot from us-west-2 to us-east-1\r\n\r\n$ curl -k -d '\r\n{\r\n    \"SourceRegion\":\"us-west-2\",\r\n    \"SourceSnapshotId\":\"snap-ac56028b\",\r\n    \"Description\":\"Snapshot copied from us-west-2\"\r\n}' \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/copy-snapshot?env_id=2&region=us-east-1\"\r\n\r\n```\r\n\r\n### <a name=\"create-image\"></a>create-image\r\n\r\nCreate an AMI from an Amazon EBS-backed instance.\r\n\r\n[CreateImage (go aws sdk)](http://docs.aws.amazon.com/sdk-for-go/api/service/ec2/#EC2.CreateImage)\r\n\r\n```\r\nSupported POST data JSON parameters:\r\n\r\n    Description string  // Description of the snapshot.\r\n    DryRun      bool    // Check permissions.\r\n    InstanceId  string  // The ID of the instance.\r\n    Name        string  // A name for the new image.\r\n    NoReboot    bool    // If true, the instance will not be shut down before creating the image.\r\n\r\n    BlockDeviceMappings [{\r\n        DeviceName  string  // The device name exposed to the instance (for example, /dev/sdh or xvdh).\r\n        NoDevice    string  // Suppresses the specified device\r\n        VirtualName string  // The virtual device name (ephemeralN).\r\n        Ebs {\r\n            DeleteOnTermination bool   // Indicates whether the EBS volume is deleted on termination\r\n            Encrypted           bool   // Indicates whether the EBS volume is encrypted.\r\n            Iops                int64  // The number of I/O operations per second (IOPS) that the volume supports.\r\n            SnapshotId          string // The ID of the snapshot.\r\n            VolumeSize          int64  // The size of the volume, in GiB.\r\n            VolumeType          string // The volume type: gp2, io1, st1, sc1, or standard.\r\n        }\r\n    }]\r\n```\r\n\r\nExample:\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Create an image of instance i-2aa60a32\r\n\r\n$ curl -k -d '{\r\n    \"InstanceID\":\"i-2aa60a32\",\r\n    \"Description\":\"Created by obdi-aws-ec2lib from instance i-2aa60a32\",\r\n    \"Name\":\"New AMI\",\r\n    \"NoReboot\":true }' \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/create-image?env_id=2&region=us-west-2\"\r\n\r\n```\r\n\r\n### <a name=\"create-snapshot\"></a>create-snapshot\r\n\r\nCreate a snapshot, in S3, of a volume.\r\n\r\n[CreateSnapshot (go aws sdk)](http://docs.aws.amazon.com/sdk-for-go/api/service/ec2/#EC2.CreateSnapshot)\r\n\r\n```\r\nSupported POST data JSON parameters:\r\n\r\n    Description string  // Description of the snapshot.\r\n    VolumeId    string  // VolumeId to take a snapshot of.\r\n    DryRun      bool\r\n```\r\n\r\nExample:\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Create a snapshot of vol-cb5f1166 in S3\r\n\r\n$ curl -k -d '{ \"DryRun\":false,\r\n                \"Description\":\"Created by obdi-aws-p2ec2 for vol-cb5f1166\",\r\n                \"VolumeId\":\"vol-cb5f1166\"}' \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/create-snapshot?env_id=1\"\r\n\r\n```\r\n\r\n### <a name=\"create-volume\"></a>create-volume\r\n\r\nCreate a volume in an availability zone.\r\n\r\n[CreateVolume (go aws sdk)](http://docs.aws.amazon.com/sdk-for-go/api/service/ec2/#EC2.CreateVolume)\r\n\r\n[EBS Volumes](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html)\r\n\r\n[Device Naming](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html)\r\n\r\n```\r\nSupported POST data JSON parameters:\r\n\r\n    Encrypted  bool\r\n    Iops       int64  // 100 to 20000 for io1\r\n    KmsKeyId   string // For encrypted volume\r\n    Size       int64  // In GB\r\n    SnapshotId string\r\n    VolumeType string // gp2, io1, st1, sc1 or standard\r\n```\r\n\r\nExample:\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Create a 30GB gp2 volume in availability zone us-west-2a\r\n\r\n$ curl -k -d '{\"Size\":30,\"VolumeType\":\"gp2\",\"Encrypted\":false}' \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/create-volume?env_id=1&region=us-west-2&availability_zone=us-west-2a\"\r\n\r\n```\r\n\r\n### <a name=\"delete-snapshot\"></a>delete-snapshot\r\n\r\nDelete a snapshot from a region.\r\n\r\n[DeleteSnapshot (go aws sdk)](http://docs.aws.amazon.com/sdk-for-go/api/service/ec2/#EC2.DeleteSnapshot)\r\n\r\n```\r\nSupported POST data JSON parameters:\r\n\r\n    DryRun     bool\r\n    SnapshotId   string\r\n```\r\n\r\nExample:\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Delete Volume vol-c5e13a4d\r\n\r\n$ curl -k -d '{\"DryRun\":false,\"SnapshotId\":\"snap-c5e13a4d\"}' \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/delete-snapshot?env_id=1&region=us-east-1\"\r\n\r\n```\r\n\r\n### <a name=\"delete-volume\"></a>delete-volume\r\n\r\nDelete a volume from a region.\r\n\r\n[DeleteVolume (go aws sdk)](http://docs.aws.amazon.com/sdk-for-go/api/service/ec2/#EC2.DeleteVolume)\r\n\r\n```\r\nSupported POST data JSON parameters:\r\n\r\n    DryRun     bool\r\n    VolumeId   string\r\n```\r\n\r\nExample:\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Delete Volume vol-c5e13a4d\r\n\r\n$ curl -k -d '{\"DryRun\":false,\"VolumeId\":\"vol-c5e13a4d\"}' \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/delete-volume?env_id=1&region=us-west-2\"\r\n\r\n```\r\n\r\n### <a name=\"describe-availability-zone\"></a>describe-availability-zone\r\n\r\nGet the status of an availability zone.\r\n\r\nExample:\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Get status of availability zone us-east-1c\r\n\r\n$ curl -k \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/describe-availability-zone?env_id=1&region=us-east-1&availability_zone=us-east-1c\"\r\n\r\n```\r\n\r\n### <a name=\"describe-instances\"></a>describe-instances\r\n\r\nExample:\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# All instances in the default region (us-east-1)\r\n\r\n$ curl -k https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/describe-instances?env_id=1\r\n\r\n# All instances in us-west-1\r\n\r\n$ curl -k \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/describe-instances?env_id=1&region=us-west-1\"\r\n\r\n# Filter on instance-id (the global filter is also applied if set)\r\n\r\n$ curl -k \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/describe-instances?env_id=1&filter=instance-id=i-e12hb395\"\r\n\r\n# Filter on 2 instance-ids\r\n\r\n$ curl -k \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/describe-instances?env_id=1&filter=instance-id=i-e12hb395&filter=instance-id=i-7gbd59fe\"\r\n\r\n```\r\n\r\nThe filter name instance-id was used above. A list of all filter names are at:\r\n\r\n  https://docs.aws.amazon.com/sdk-for-go/api/service/ec2/#DescribeInstancesInput\r\n\r\n### <a name=\"describe-regions\"></a>describe-regions\r\n\r\nExample:\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Show all available regions. There are no other options.\r\n# This does not call out to AWS, it uses the goamz library.\r\n\r\n$ curl -k https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/describe-regions\r\n\r\n```\r\n\r\n### <a name=\"describe-snapshots\"></a>describe-snapshots\r\n\r\nGet the details of EBS snapshot(s).\r\n\r\nhttp://docs.aws.amazon.com/sdk-for-go/api/service/ec2/#EC2.DescribeSnapshots\r\n\r\n```\r\nURL parameters:\r\n\r\n    dry_run                \"true\"|\"false\".\r\n    filter                 List. E.g. snapshot-id=snap-cd90d5ea.\r\n                           Use more than once to specify more.\r\n    owner_id               List. Use more than once to specify more.\r\n    snapshot_id            List. Use more than once to specify more.\r\n                           Omit snapshot_id to get status of all volumes.\r\n    restorable_by_user_id  List. Use more than once to specify more.\r\n    max_results            E.g. 100.\r\n    next_token             E.g. token.\r\n    env_id                 E.g. 1.\r\n    region                 E.g. us-east-1.\r\n```\r\n\r\nThe filter name snapshot-id was used above. A list of all filter names are at:\r\n\r\n  https://docs.aws.amazon.com/sdk-for-go/api/service/ec2/#DescribeSnapshotsInput\r\n\r\nTo specify multiple values for a filter key use a comma, not more filter entries.\r\n\r\nExamples:\r\n\r\nFilter by status completed or error (but not pending status):\r\n> &filter=status=completed,error\r\n\r\nFilter by 3 'volume-id's that the snapshot is for.\r\n> &filter=volume-id=vol-810baafb,vol-cdea3445,vol-800baafa\r\n\r\nExample:\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Show all snapshots that you're allowed to see\r\n\r\n$ curl -k \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/describe-snapshots?env_id=2&region=us-west-2\"\r\n\r\n# Show the details for two snapshot IDs\r\n# It is an error to use a non-existent snapshot ID and AWS will complain\r\n\r\n$ curl -k \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/describe-snapshots?env_id=2&region=us-west-2&snapshot_id=snap-38cfe109&snapshot_id=snap-7fb97b3b\"\r\n\r\n# Show the details for the same two snapshot IDs using filters instead\r\n# It is /not/ an error to use a non-existent snapshot ID and AWS will /not/ complain.\r\n\r\n$ curl -k \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/describe-snapshots?env_id=2&region=us-west-2&filter=snapshot-id=snap-38cfe109,snap-7fb97b3b\"\r\n\r\n```\r\n\r\n### <a name=\"describe-volumes\"></a>describe-volumes\r\n\r\nGet the details of EBS volume(s).\r\n\r\nhttp://docs.aws.amazon.com/sdk-for-go/api/service/ec2/#EC2.DescribeVolumes\r\n\r\n```\r\nURL parameters:\r\n\r\n    dry_run     \"true\"|\"false\".\r\n    volume_id   E.g. vol-3af379e. Use more than once to specify more.\r\n                Omit volume_id to get status of all volumes.\r\n    env_id      E.g. 1.\r\n    region      E.g. us-east-1.\r\n```\r\n\r\nExample:\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Get details of all volumes\r\n\r\n$ curl -k \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/describe-volumes?env_id=1&region=us-east-1\"\r\n\r\n# Get details of volume vol-3af379e\r\n\r\n$ curl -k \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/describe-volumes?env_id=1&region=us-east-1&volume_id=vol-3af379e\"\r\n\r\n```\r\n\r\n### <a name=\"describe-volume-status\"></a>describe-volume-status\r\n\r\nGet the status of an EBS volume.\r\n\r\nhttp://docs.aws.amazon.com/sdk-for-go/api/service/ec2/#EC2.DescribeVolumeStatus\r\n\r\n```\r\nURL parameters:\r\n\r\n    dry_run     \"true\"|\"false\".\r\n    volume_id   E.g. vol-3af379e. Use more than once to specify more.\r\n                Omit volume_id to get status of all volumes.\r\n    env_id      E.g. 1.\r\n    region      E.g. us-east-1.\r\n```\r\n\r\nExample:\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Get status of all volumes\r\n\r\n$ curl -k \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/describe-volume-status?env_id=1&region=us-east-1\"\r\n\r\n# Get status of volume vol-3af379e\r\n\r\n$ curl -k \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/describe-volume-status?env_id=1&region=us-east-1&volume_id=vol-3af379e\"\r\n\r\n```\r\n\r\n### <a name=\"detach-volume\"></a>detach-volume\r\n\r\nDetach a volume from an instance.\r\n\r\n[DetachVolume (go aws sdk)](http://docs.aws.amazon.com/sdk-for-go/api/service/ec2/#EC2.DetachVolume)\r\n\r\n```\r\nSupported POST data JSON parameters:\r\n\r\n    DryRun     bool\r\n    Device     string // The device name.\r\n    Force      bool   // Last-resort force detachment.\r\n    InstanceId string // The ID of the instance.\r\n    VolumeId   string // The ID of the volume to be detached.\r\n```\r\n\r\nExample:\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Detach volume vol-cb5f1166, mounted on /dev/xvdb, from instance i-d0d63149:\r\n\r\n$ curl -k -d '{\"Device\":\"/dev/xvdb\",\"InstanceId\":\"i-d0d63149\",\"VolumeId\":\"vol-cb5f1166\"}' \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/detach-volume?env_id=1&region=us-west-1\"\r\n\r\n```\r\n\r\n### <a name=\"import-image\"></a>import-image\r\n\r\nUNIMPLEMENTED - not sure how to do this and for it to make sense when using remotely.\r\n\r\n### <a name=\"import-instance\"></a>import-instance\r\n\r\nUNIMPLEMENTED - not sure how to do this and for it to make sense when using remotely.\r\n\r\n### <a name=\"register-image\"></a>register-image\r\n\r\nCreate an AMI from a snapshot.\r\n\r\n[RegisterImage (go aws sdk)](http://docs.aws.amazon.com/sdk-for-go/api/service/ec2/#EC2.RegisterImage)\r\n\r\n```\r\nSupported POST data JSON parameters:\r\n\r\n    Name               string  // A name for your AMI.\r\n    Architecture       string\r\n    Description        string  // A description for your AMI.\r\n    DryRun             bool\r\n    EnaSupport         bool    // enhanced networking with ENA.\r\n    ImageLocation      string  // full path to your AMI manifest in Amazon S3.\r\n    KernelId           string  // The ID of the kernel.\r\n    RamdiskId          string  // The ID of the RAM disk.\r\n    RootDeviceName     string  // for example, /dev/sda1, or /dev/xvda.\r\n    SriovNetSupport    string  // enhanced networking with the Intel 82599\r\n    VirtualizationType string  // The type of virtualization. Default: paravirtual\r\n\r\n    BlockDeviceMappings [{\r\n        DeviceName  string  // The device name exposed to the instance (for example, /dev/sdh or xvdh).\r\n        NoDevice    string  // Suppresses the specified device\r\n        VirtualName string  // The virtual device name (ephemeralN).\r\n        Ebs {\r\n            DeleteOnTermination bool   // Indicates whether the EBS volume is deleted on termination\r\n            Encrypted           bool   // Indicates whether the EBS volume is encrypted.\r\n            Iops                int64  // The number of I/O operations per second (IOPS) that the volume supports.\r\n            SnapshotId          string // The ID of the snapshot.\r\n            VolumeSize          int64  // The size of the volume, in GiB.\r\n            VolumeType          string // The volume type: gp2, io1, st1, sc1, or standard.\r\n        }\r\n    }]\r\n```\r\n\r\nExample:\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Create an AMI from a snapshot\r\n\r\n$ curl -k -d '\r\n{\r\n    \"Name\":\"My AMI\",\r\n    \"Description\":\"My AMI Description\",\r\n    \"RootDeviceName\":\"sda1\",\r\n    \"VirtualizationType\":\"hvm\",\r\n    \"BlockDeviceMappings\":[\r\n        {\r\n            \"DeviceName\":\"sda1\",\r\n            \"Ebs\":{\r\n                \"DeleteOnTermination\":true,\r\n                \"SnapshotId\":\"snap-af21558b\",\r\n                \"VolumeSize\":21,\r\n                \"VolumeType\":\"gp2\"\r\n             }\r\n         }\r\n    ]\r\n}' \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/register-image?env_id=2&region=us-west-2\"\r\n\r\n```\r\n\r\n### <a name=\"run-instances\"></a>run-instances\r\n\r\nCreate an Instance from an AMI.\r\n\r\n[RunInstances (go aws sdk)](http://docs.aws.amazon.com/sdk-for-go/api/service/ec2/#EC2.RunInstances)\r\n\r\n```\r\nSupported POST data JSON parameters:\r\n\r\n    AdditionalInfo string  // Reserved.\r\n    ClientToken    string  // Identifier you provide to ensure the idempotency.\r\n    DisableApiTermination string  // If you set this parameter to true, you can't terminate the instance.\r\n    DryRun         bool\r\n    EbsOptimized   bool    // Indicates whether the instance is optimized for EBS I/O.\r\n    ImageId        string  // The ID of the AMI.\r\n    InstanceInitiatedShutdownBehavior string // Whether an instance stops or terminates.\r\n    InstanceType   string  // The instance type. Default: m1.small.\r\n    KernelId       string  // The ID of the kernel.\r\n    KeyName        string  // The name of the key pair.\r\n    MaxCount       int64   // The maximum number of instances to launch.\r\n    MinCount       int64   // The minimum number of instances to launch.\r\n    PrivateIpAddress string  // [EC2-VPC] The primary IP address.\r\n    RamdiskId      string  // The ID of the RAM disk.\r\n    SubnetId       string  // [EC2-VPC] The ID of the subnet to launch the instance into.\r\n    UserData       string  // The user data to make available to the instance.\r\n\r\n    // One or more security group IDs. You can create a security group using CreateSecurityGroup.\r\n    // Default: Amazon EC2 uses the default security group.\r\n    SecurityGroupIds [ string ]\r\n\r\n    // [EC2-Classic, default VPC] One or more security group names. For a nondefault\r\n    // VPC, you must use security group IDs instead.\r\n    // Default: Amazon EC2 uses the default security group.\r\n    SecurityGroups [ string ]\r\n\r\n    Monitoring {\r\n        Enabled bool  //Indicates whether monitoring is enabled for the instance.\r\n    }\r\n\r\n    NetworkInterfaces [{\r\n        AssociatePublicIpAddress bool    // Indicates whether to assign a public IP address to an instance.\r\n        DeleteOnTermination      bool    // Whether the interface is deleted on termination.\r\n        Description              string  // The description of the network interface.\r\n        DeviceIndex              int64   // You must provide the device index.\r\n        Groups                   string  // The IDs of the security groups for the network interface.\r\n        NetworkInterfaceId       string  // The ID of the network interface.\r\n        PrivateIpAddress         string  // The private IP address of the network interface.\r\n        SubnetId                 string  // The ID of the subnet associated with the network string.\r\n        SecondaryPrivateIpAddressCount int64 // The number of secondary private IP addresses.\r\n\r\n        PrivateIpAddresses [{\r\n            Primary           bool   // Indicates whether this is the primary private IP address.\r\n            PrivateIpAddress  string // The private IP addresses.\r\n        }]\r\n\r\n    }]\r\n\r\n    Placement {\r\n        Affinity         string  // The affinity setting for the instance on the Dedicated Host.\r\n        AvailabilityZone string  // The Availability Zone of the instance.\r\n        GroupName        string  // The name of the placement group the instance is in.\r\n        HostId           string  // The ID of the Dedicted host on which the instance resides.\r\n        Tenancy          string  // The tenancy of the instance (if the instance is running in a VPC).\r\n                                 // default, dedicated or host\r\n    }\r\n\r\n    IamInstanceProfile IamInstanceProfileSpecification { // The IAM instance profile.\r\n        Arn    string  // The Amazon Resource Name (ARN) of the instance profile.\r\n        Name   string  // The name of the instance profile.\r\n    }\r\n\r\n    BlockDeviceMappings [{\r\n        DeviceName  string  // The device name exposed to the instance (for example, /dev/sdh or xvdh).\r\n        NoDevice    string  // Suppresses the specified device\r\n        VirtualName string  // The virtual device name (ephemeralN).\r\n        Ebs {\r\n            DeleteOnTermination bool   // Indicates whether the EBS volume is deleted on termination\r\n            Encrypted           bool   // Indicates whether the EBS volume is encrypted.\r\n            Iops                int64  // The number of I/O operations per second (IOPS) that the volume supports.\r\n            SnapshotId          string // The ID of the snapshot.\r\n            VolumeSize          int64  // The size of the volume, in GiB.\r\n            VolumeType          string // The volume type: gp2, io1, st1, sc1, or standard.\r\n        }\r\n    }]\r\n```\r\n\r\nExample:\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Create an Instance from an AMI using mostly default values.\r\n\r\n$ curl -k -d '\r\n{\r\n    \"ImageId\":\"ami-e6d00e86\",\r\n    \"InstanceType\":\"t2.micro\",\r\n    \"MaxCount\":1,\r\n    \"MinCount\":1,\r\n    \"BlockDeviceMappings\":[\r\n        {\r\n            \"DeviceName\":\"sda1\",\r\n            \"Ebs\":{\r\n                \"DeleteOnTermination\":true,\r\n                \"VolumeSize\":21,\r\n                \"VolumeType\":\"gp2\"\r\n             }\r\n         }\r\n    ]\r\n}' \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/run-instances?env_id=2&region=us-west-2\"\r\n\r\n# Create an Instance from an AMI using mostly default values.\r\n# Additionally specify the Availability zone and security group.\r\n\r\n$ curl -k -d '\r\n{\r\n    \"ImageId\":\"ami-e6d00e86\",\r\n    \"InstanceType\":\"t2.micro\",\r\n    \"MaxCount\":1,\r\n    \"MinCount\":1,\r\n    \"SecurityGroups\":\"mainsg\"\r\n    \"Placement\": {\r\n        \"AvailabilityZone\":\"us-west-2c\"\r\n    },\r\n    \"BlockDeviceMappings\":[\r\n        {\r\n            \"DeviceName\":\"sda1\",\r\n            \"Ebs\":{\r\n                \"DeleteOnTermination\":true,\r\n                \"VolumeSize\":21,\r\n                \"VolumeType\":\"gp2\"\r\n             }\r\n         }\r\n    ]\r\n}' \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/aws-ec2lib/run-instances?env_id=2&region=us-west-2\"\r\n\r\n```\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}